# Check if double 'a' is less than or equal than 'b' 
# IEEE 754 compliant

[require]
GLSL >= 1.30

[vertex shader]
void main()
{
    gl_Position = gl_Vertex;
}

[fragment shader]
/* Returns the fraction bits of the double-precision floating-point value `a'.*/
uvec2 extractFloat64Frac( uvec2 a )
{
    return uvec2( a.x & 0x000FFFFF, a.y );
}

/* Returns the exponent bits of the double-precision floating-point value `a'.*/
uint extractFloat64Exp( uvec2 a )
{
    return (a.x>>20) & 0x7FF;
}

/* Returns the sign bit of the double-precision floating-point value `a'.*/
uint extractFloat64Sign( uvec2 a )
{
    return (a.x>>31);
}

/* Returns 1 if the 64-bit value formed by concatenating `a0' and `a1' is less
 * than or equal to the 64-bit value formed by concatenating `b0' and `b1'.
 * Otherwise, returns 0.
 */
bool le64( uint a0, uint a1, uint b0, uint b1 )
{
    return ( a0 < b0 ) || ( ( a0 == b0 ) && ( a1 <= b1 ) );
}

/* Returns 1 if the double-precision floating-point value `a' is less than or
 * equal to the corresponding value `b', and 0 otherwise.  The comparison is
 * performed according to the IEEE Standard for Floating-Point Arithmetic.
 */
bool le_fp64( uvec2 a, uvec2 b )
{
    uint aSign;
    uint bSign;
    uvec2 aFrac;
    uvec2 bFrac;

    aFrac = extractFloat64Frac( a );
    bFrac = extractFloat64Frac( b );
    if (    (    ( extractFloat64Exp( a ) == 0x7FF )
              && ( aFrac.x | aFrac.y ) )
         || (    ( extractFloat64Exp( b ) == 0x7FF )
              && ( bFrac.x | bFrac.y ) )
       ) {
        return 0;
    }
    aSign = extractFloat64Sign( a );
    bSign = extractFloat64Sign( b );
    if ( aSign != bSign ) {
        return aSign
            || (    ( ( ( ( a.x | b.x )<<1 ) ) | a.y | b.y )
                 == 0 );
    }
    return
          aSign ? le64( b.x, b.y, a.x, a.y )
        : le64( a.x, a.y, b.x, b.y );

}

uniform uvec2 a;
uniform uvec2 b;
uniform bool expected;

void main()
{
    /* Generate green if the expected value is producted, red
     * otherwise.
     */
    gl_FragColor = le_fp64(a,b) == expected
        ? vec4(0.0, 1.0, 0.0, 1.0)
        : vec4(1.0, 0.0, 0.0, 1.0);
}

[test]
# A bunch of tests to run.  The 'uniform' lines set the uniforms.  The
# 'draw rect' line draws a rectangle that covers the whole window.
# The 'probe all' line verifies that every pixel contains the expected
# color.

# Try +0.0 and +0.0
uniform uvec2 a        0x00000000 0x00000000
uniform uvec2 b        0x00000000 0x00000000
uniform bool expected  1
draw rect -1 -1 2 2
probe all rgba 0.0 1.0 0.0 1.0

# Try 0.1 and 0.0
uniform uvec2 a        0x3FB99999 0x9999999A
uniform uvec2 b        0x00000000 0x00000000
uniform bool expected  0
draw rect -1 -1 2 2
probe all rgba 0.0 1.0 0.0 1.0

# Try 0.0 and 0.1
uniform uvec2 a        0x00000000 0x00000000
uniform uvec2 b        0x3FB99999 0x9999999A
uniform bool expected  1
draw rect -1 -1 2 2
probe all rgba 0.0 1.0 0.0 1.0

# Try 1 bit set and 0.0
uniform uvec2 a        0x00000000 0x00000001
uniform uvec2 b        0x00000000 0x00000000
uniform bool expected  0
draw rect -1 -1 2 2
probe all rgba 0.0 1.0 0.0 1.0

# Try 0.0 and 1 bit set
uniform uvec2 a        0x00000000 0x00000000
uniform uvec2 b        0x00000000 0x00000001
uniform bool expected  1
draw rect -1 -1 2 2
probe all rgba 0.0 1.0 0.0 1.0

# Try 1 bit set and 1 bit set
uniform uvec2 a        0x00000000 0x00000001
uniform uvec2 b        0x00000000 0x00000001
uniform bool expected  1
draw rect -1 -1 2 2
probe all rgba 0.0 1.0 0.0 1.0
